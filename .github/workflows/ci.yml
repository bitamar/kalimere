name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  api:
    name: API - Build, Lint & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: kalimere_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Wait for database
        run: npx wait-on tcp:127.0.0.1:5432

      - name: Recreate test database
        env:
          PGPASSWORD: postgres
        run: |
          psql -h 127.0.0.1 -U postgres -c 'DROP DATABASE IF EXISTS kalimere_test;' postgres
          psql -h 127.0.0.1 -U postgres -c 'CREATE DATABASE kalimere_test;' postgres

      - name: Apply migrations
        env:
          DATABASE_URL: postgres://postgres:postgres@127.0.0.1:5432/kalimere_test
        run: npm run db:migrate --workspace api

      - name: TypeScript compilation
        run: npm run build --workspace api

      - name: Lint
        run: npm run lint --workspace api

      - name: Run tests
        env:
          NODE_ENV: test
          TEST_DATABASE_URL: postgres://postgres:postgres@127.0.0.1:5432/kalimere_test
          DATABASE_URL: postgres://postgres:postgres@127.0.0.1:5432/kalimere_dev
          APP_ORIGIN: http://localhost:3000
          URL: http://localhost:3000
          JWT_SECRET: "1234567890123456789012345678901234567890"
          GOOGLE_CLIENT_ID: dummy-google-client-id
          GOOGLE_CLIENT_SECRET: dummy-google-client-secret
          TWILIO_SID: AC00000000000000000000000000000000
          TWILIO_AUTH_TOKEN: 00000000000000000000000000000000
          TWILIO_WHATSAPP_FROM: whatsapp:+15555550100
        run: npm run coverage --workspace api

      - name: Post API coverage to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          # noinspection YAMLSchemaValidation
          script: |
            const fs = require('fs');
            const path = 'api/coverage/coverage-summary.json';
            if (!fs.existsSync(path)) {
              core.warning('API coverage summary not found');
              return;
            }
            const summary = JSON.parse(fs.readFileSync(path, 'utf8'));
            const t = summary.total;
            const pct = (n) => (typeof n === 'number' ? n.toFixed(2) : String(n));
            const body = `<!-- api-coverage -->\n` +
              `API Coverage\n` +
              `- Lines: ${pct(t.lines.pct)}%\n` +
              `- Statements: ${pct(t.statements.pct)}%\n` +
              `- Functions: ${pct(t.functions.pct)}%\n` +
              `- Branches: ${pct(t.branches.pct)}%`;

            const { owner, repo, number } = context.issue;
            const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number: number, per_page: 100 });
            const existing = comments.find(c => c.body && c.body.includes('<!-- api-coverage -->'));
            if (existing) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number: number, body });
            }

      - name: Cleanup database
        if: always()
        env:
          PGPASSWORD: postgres
        run: psql -h 127.0.0.1 -U postgres -c 'DROP DATABASE IF EXISTS kalimere_test;' postgres

  frontend:
    name: Frontend - Build, Lint & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
    env:
      VITE_API_BASE_URL: http://localhost:3000/api

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - name: Install dependencies
        run: npm ci

      - name: TypeScript compilation
        run: npm run type-check --workspace front

      - name: Lint
        run: npm run lint --workspace front

      - name: Run tests
        run: npm run test:coverage --workspace front

      - name: Format check
        run: npm run format:check --workspace front

      - name: Post Frontend coverage to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          # noinspection YAMLSchemaValidation
          script: |
            const fs = require('fs');
            const path = 'front/coverage/coverage-summary.json';
            if (!fs.existsSync(path)) {
              core.warning('Frontend coverage summary not found');
              return;
            }
            const summary = JSON.parse(fs.readFileSync(path, 'utf8'));
            const t = summary.total;
            const pct = (n) => (typeof n === 'number' ? n.toFixed(2) : String(n));
            const body = `<!-- front-coverage -->\n` +
              `Frontend Coverage\n` +
              `- Lines: ${pct(t.lines.pct)}%\n` +
              `- Statements: ${pct(t.statements.pct)}%\n` +
              `- Functions: ${pct(t.functions.pct)}%\n` +
              `- Branches: ${pct(t.branches.pct)}%`;

            const { owner, repo, number } = context.issue;
            const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number: number, per_page: 100 });
            const existing = comments.find(c => c.body && c.body.includes('<!-- front-coverage -->'));
            if (existing) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number: number, body });
            }
